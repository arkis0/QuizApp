// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quiz_app_api.Data;

#nullable disable

namespace quiz_app_api.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("quiz_app_api.Data.Entities.QuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableTime")
                        .HasColumnType("int");

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("int");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableTime = 25,
                            CorrectAnswer = 0,
                            Options = "[\"\\u017Celaza\",\"witaminy D\",\"witaminy B\",\"magnezu\"]",
                            Text = "Anemię powoduje niedobór:"
                        },
                        new
                        {
                            Id = 2,
                            AvailableTime = 25,
                            CorrectAnswer = 1,
                            Options = "[\"w Tatrach\",\"w Bieszczadach\",\"w Sudetach\",\"w G\\u00F3rach Sto\\u0142owych\"]",
                            Text = "W których górach znajduje się Jezioro Solińskie?"
                        },
                        new
                        {
                            Id = 3,
                            AvailableTime = 25,
                            CorrectAnswer = 1,
                            Options = "[\"Henryk Sienkiewicz\",\"Stefan \\u017Beromski\",\"Adam Mickiewicz\",\"W\\u0142adys\\u0142aw Reymont\"]",
                            Text = "Kto jest autorem \"Syzyfowych prac\"?"
                        },
                        new
                        {
                            Id = 4,
                            AvailableTime = 25,
                            CorrectAnswer = 3,
                            Options = "[\"Lublinie\",\"Warszawie\",\"Wroc\\u0142awiu\",\"Poznaniu\"]",
                            Text = "Uniwersytet im. Adama Mickiewicza mieści się w:"
                        },
                        new
                        {
                            Id = 5,
                            AvailableTime = 25,
                            CorrectAnswer = 2,
                            Options = "[\"forint\",\"szyling\",\"euro\",\"marka austriacka\"]",
                            Text = "Jaka waluta obowiązuje w Austrii?"
                        },
                        new
                        {
                            Id = 6,
                            AvailableTime = 25,
                            CorrectAnswer = 3,
                            Options = "[\"Ocean Indyjski\",\"Ocean Arktyczny\",\"Ocean Atlantycki\",\"Ocean Spokojny\"]",
                            Text = "Który ocean jest największy?"
                        });
                });

            modelBuilder.Entity("quiz_app_api.Data.Entities.SystemStatusEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SystemStatusEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = 0,
                            UpdatedAt = new DateTime(2024, 3, 27, 15, 14, 53, 670, DateTimeKind.Utc).AddTicks(2287)
                        });
                });

            modelBuilder.Entity("quiz_app_api.Data.Entities.UserAnswerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChosenOption")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswerEntities");
                });

            modelBuilder.Entity("quiz_app_api.Data.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountType = 1,
                            Login = "admin.admin",
                            Name = "admin",
                            Password = "0",
                            Status = 0,
                            Surname = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccountType = 0,
                            Login = "kamil.zdun",
                            Name = "Kamil",
                            Password = "111",
                            Status = 0,
                            Surname = "Zdun"
                        },
                        new
                        {
                            Id = 3,
                            AccountType = 0,
                            Login = "michał.zdun",
                            Name = "Michał",
                            Password = "222",
                            Status = 0,
                            Surname = "Zdunowski"
                        },
                        new
                        {
                            Id = 4,
                            AccountType = 0,
                            Login = "wojtek.zduński",
                            Name = "Wojtek",
                            Password = "333",
                            Status = 0,
                            Surname = "Zduński"
                        });
                });

            modelBuilder.Entity("quiz_app_api.Data.Entities.UserAnswerEntity", b =>
                {
                    b.HasOne("quiz_app_api.Data.Entities.QuestionEntity", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quiz_app_api.Data.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
